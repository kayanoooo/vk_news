# debug_filter.py
import gspread
from google.oauth2.service_account import Credentials
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def debug_filtering():
    """–û—Ç–ª–∞–¥–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    GOOGLE_SHEET_ID = "13Mh3PmXGB0_cfXj8f_wiDdn186HRJ638NuNT4pCcTqA"
    
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
        creds = Credentials.from_service_account_file("credentials.json", scopes=SCOPES)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_key(GOOGLE_SHEET_ID)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç
        sheet = None
        for sheet_name in ["AI News Hub", "News", "–õ–∏—Å—Ç1", "Sheet1"]:
            try:
                sheet = spreadsheet.worksheet(sheet_name)
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—Å—Ç: '{sheet_name}'")
                break
            except:
                continue
        
        if not sheet:
            available_sheets = [ws.title for ws in spreadsheet.worksheets()]
            logger.error(f"‚ùå –õ–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_sheets}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        records = sheet.get_all_records()
        logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(records)}")
        
        if not records:
            logger.info("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        logger.info("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å):")
        for key, value in records[0].items():
            logger.info(f"   '{key}': '{value}' (—Ç–∏–ø: {type(value).__name__})")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        logger.info("\nüîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π:")
        processed_count = 0
        skipped_count = 0
        
        for i, row in enumerate(records, start=2):
            status = row.get("Status", "")
            relevance_score = row.get("RelevanceScore", 0)
            title = row.get("Title", "").strip()
            
            logger.info(f"\n--- –°—Ç—Ä–æ–∫–∞ {i} ---")
            logger.info(f"Title: '{title}'")
            logger.info(f"Status: '{status}' (–æ–∂–∏–¥–∞–µ—Ç—Å—è: 'Processed')")
            logger.info(f"RelevanceScore: '{relevance_score}' (—Ç–∏–ø: {type(relevance_score).__name__})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            status_ok = status == "Processed"
            
            try:
                relevance = float(relevance_score)
                relevance_ok = relevance > 0.7
            except (ValueError, TypeError) as e:
                relevance = 0.0
                relevance_ok = False
                logger.info(f"RelevanceScore –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ ({e})")
            
            logger.info(f"Status OK: {status_ok}")
            logger.info(f"RelevanceScore OK: {relevance_ok} ({relevance} > 0.7 = {relevance_ok})")
            
            if status_ok and relevance_ok:
                processed_count += 1
                logger.info(f"‚úÖ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
            else:
                skipped_count += 1
                logger.info(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞")
        
        logger.info(f"\nüìà –ò–¢–û–ì–û:")
        logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}")
        logger.info(f"–ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}")
        logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if processed_count == 0 and len(records) > 0:
            logger.info(f"\nüîé –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
            for i, row in enumerate(records[:5], start=2):  # –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
                status = row.get("Status", "")
                relevance_score = row.get("RelevanceScore", 0)
                
                status_reason = "Status –Ω–µ 'Processed'" if status != "Processed" else ""
                
                try:
                    relevance = float(relevance_score)
                    relevance_reason = "RelevanceScore <= 0.7" if relevance <= 0.7 else ""
                except:
                    relevance_reason = "RelevanceScore –Ω–µ —á–∏—Å–ª–æ"
                
                reasons = [r for r in [status_reason, relevance_reason] if r]
                reason_text = ", ".join(reasons) if reasons else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                logger.info(f"–°—Ç—Ä–æ–∫–∞ {i}: '{row.get('Title', '')}' - {reason_text}")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    debug_filtering()