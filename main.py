# vk_news_publisher_fixed_v2.py
import gspread
from google.oauth2.service_account import Credentials
import requests
import time
import logging
from typing import Dict, Any

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('vk_publisher.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class VKNewsPublisher:
    def __init__(self):
        self.VK_GROUP_ID = "-—Å–≤–æ–π –≤–∫–≥—Ä—É–ø–ø–∞ –∞–π–¥–∏, –≤ –Ω–∞—á–∞–ª–µ –≤—Å–µ–≥–¥–∞ –º–∏–Ω—É—Å"
        self.VK_GROUP_TOKEN = "—Å–≤–æ–π –≤–∫–≥—Ä—É–ø–ø–∞ —Ç–æ–∫–µ–Ω"
        self.GOOGLE_SHEET_ID = "—Å–≤–æ–π –≥—É–≥–ª—Ç–∞–±–ª–∏—Ü—ã –∞–π–¥–∏"
        
        self.sheet = self._init_google_sheets()
        
    def _init_google_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
        try:
            SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
            creds = Credentials.from_service_account_file("credentials.json", scopes=SCOPES)
            client = gspread.authorize(creds)
            spreadsheet = client.open_by_key(self.GOOGLE_SHEET_ID)
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª–∏—Å—Ç
            for sheet_name in ["AI News Hub", "News", "–õ–∏—Å—Ç1", "Sheet1"]:
                try:
                    return spreadsheet.worksheet(sheet_name)
                except:
                    continue
            
            available_sheets = [ws.title for ws in spreadsheet.worksheets()]
            raise Exception(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: {available_sheets}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
            raise

    def publish_to_vk(self, post_text: str) -> Dict[str, Any]:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ VK —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            url = "https://api.vk.com/method/wall.post"
            params = {
                "owner_id": self.VK_GROUP_ID,
                "from_group": 1,
                "message": post_text,
                "access_token": self.VK_GROUP_TOKEN,
                "v": "5.131"
            }
            
            response = requests.post(url, params=params, timeout=30)
            data = response.json()
            
            if "response" in data:
                post_id = data["response"]["post_id"]
                logger.info(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ID: {post_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Å—Ç–µ–Ω–µ
                self.verify_post_on_wall(post_id)
                return {"success": True, "post_id": post_id}
                
            else:
                error = data.get("error", {})
                error_code = error.get("error_code")
                error_msg = error.get("error_msg", "Unknown error")
                
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {error_msg} (–∫–æ–¥: {error_code})")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                if error_code == 214:  # –î–æ—Å—Ç—É–ø –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–µ—â–µ–Ω
                    logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
                    return self.publish_alternative_method(post_text)
                else:
                    return {"success": False, "error": error_msg}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ VK: {e}")
            return {"success": False, "error": str(e)}

    def publish_alternative_method(self, post_text: str) -> Dict[str, Any]:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ò–Ω–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ–∑ from_group
            url = "https://api.vk.com/method/wall.post"
            params = {
                "owner_id": self.VK_GROUP_ID,
                "message": post_text,
                "access_token": self.VK_GROUP_TOKEN,
                "v": "5.131"
            }
            
            response = requests.post(url, params=params, timeout=30)
            data = response.json()
            
            if "response" in data:
                post_id = data["response"]["post_id"]
                logger.info(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)! ID: {post_id}")
                return {"success": True, "post_id": post_id}
            else:
                return {"success": False, "error": data.get("error", {}).get("error_msg", "Unknown error")}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {e}")
            return {"success": False, "error": str(e)}

    def verify_post_on_wall(self, post_id: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ —Å—Ç–µ–Ω–µ"""
        try:
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            
            url = "https://api.vk.com/method/wall.getById"
            params = {
                "posts": f"{self.VK_GROUP_ID}_{post_id}",
                "access_token": self.VK_GROUP_TOKEN,
                "v": "5.131"
            }
            
            response = requests.post(url, params=params, timeout=30)
            data = response.json()
            
            if "response" in data and len(data["response"]) > 0:
                post = data["response"][0]
                logger.info(f"üîç –ü–æ—Å—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω: ID {post_id}, —Ç–µ–∫—Å—Ç: {post.get('text', '')[:50]}...")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å—Ç {post_id}: {e}")

    def format_post(self, title: str, summary: str, url: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
        post_text = f"üì∞ {title}\n\n{summary}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {url}\n\n#AI #–ù–æ–≤–æ—Å—Ç–∏ #–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
        
        if len(post_text) > 4000:
            post_text = post_text[:3990] + "..."
            
        return post_text

    def find_status_column_index(self, headers: list) -> int:
        """–ù–∞—Ö–æ–¥–∏—Ç –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ Status"""
        for col_name in ["Status", "–°—Ç–∞—Ç—É—Å", "status"]:
            try:
                return headers.index(col_name) + 1
            except ValueError:
                continue
        raise ValueError(f"–ö–æ–ª–æ–Ω–∫–∞ 'Status' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {headers}")

    def update_status(self, row_index: int, status: str = "Published"):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—å–∏"""
        try:
            headers = self.sheet.row_values(1)
            status_col = self.find_status_column_index(headers)
            self.sheet.update_cell(row_index, status_col, status)
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_index}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False

    def process_news(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            logger.info("=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π ===")
            
            records = self.sheet.get_all_records()
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}")
            
            processed_count = 0
            success_count = 0
            
            for i, row in enumerate(records, start=2):
                try:
                    status = row.get("Status", "")
                    relevance_score = row.get("RelevanceScore", 0)
                    
                    if status != "Processed":
                        continue
                    
                    try:
                        relevance = float(relevance_score)
                    except (ValueError, TypeError):
                        relevance = 0.0
                    
                    if relevance <= 0.7:
                        continue
                    
                    processed_count += 1
                    
                    title = row.get("Title", "").strip()
                    summary = row.get("Summary", "").strip()
                    url = row.get("URL", "").strip()
                    
                    if not title or not url:
                        continue
                    
                    logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ [{processed_count}]: {title}")
                    
                    post_text = self.format_post(title, summary, url)
                    result = self.publish_to_vk(post_text)
                    
                    if result["success"]:
                        self.update_status(i)
                        success_count += 1
                    
                    time.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                    continue
            
            logger.info("=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
            logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}")
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise

def main():
    try:
        publisher = VKNewsPublisher()
        publisher.process_news()
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä: {e}")
        exit(1)

if __name__ == "__main__":

    main()
